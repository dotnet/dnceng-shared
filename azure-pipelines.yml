variables:
  # Cannot use key:value syntax in root defined variables
  - name: _TeamName
    value: DotNetCore
  - name: _PublishUsingPipelines
    value: true
  - name: _DotNetArtifactsCategory
    value: .NETCore
  - group: SDL_Settings

trigger:
  batch: true
  branches:
    include:
    - main

pr: none

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: NetCore1ESPool-Internal
      image: 1es-windows-2019
      os: windows
    sdl:
      tsa:
        enabled: true
      policheck:
        enabled: true
      binskim:
        enabled: true
        scanOutputDirectoryOnly: true
      credscan:
        enabled: true 
    stages:
    - stage: build
      dependsOn: []
      displayName: Build
      jobs:
      - template: /eng/common/templates-official/jobs/jobs.yml@self
        parameters:
          enableMicrobuild: false
          enablePublishBuildArtifacts: true
          enablePublishTestResults: false
          enablePublishBuildAssets: true
          enablePublishUsingPipelines: ${{ variables._PublishUsingPipelines }}
          enableTelemetry: true
          helixRepo: dotnet/arcade-services
          jobs:
          - job: Windows_NT
            timeoutInMinutes: 90
            variables:
            # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
            # DotNet-Symbol-Server-Pats provides: microsoft-symbol-server-pat, symweb-symbol-server-pat
            # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
            - group: DotNet-Blob-Feed
            - group: DotNet-Symbol-Server-Pats
            - group: Publish-Build-Assets
            - _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
            - _BuildConfig: Release
            - _PublishType: blob
            - _SignType: test
            - _DotNetPublishToBlobFeed: true
            - _InternalBuildArgs: /p:DotNetSignType=$(_SignType)
                /p:TeamName=$(_TeamName)
                /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
                /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
                /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
                /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
                /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
                /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

            steps:
            - checkout: self
              clean: true

            - task: UseDotNet@2
              displayName: Install Correct .NET Version
              inputs:
                useGlobalJson: true

            - task: UseDotNet@2
              displayName: Install .NET Version 3.1
              inputs:
                version: 3.1.x

            - task: NuGetToolInstaller@0
              inputs:
                versionSpec: 6.1.x

            - powershell: eng/set-version-parameters.ps1
              displayName: Calculate release version variables

            - script: eng/common/cibuild.cmd
                -configuration $(_BuildConfig)
                -prepareMachine
                $(_InternalBuildArgs)
                /p:Test=false
                /P:Sign=false
              name: Build
              displayName: Build / Publish
              condition: succeeded()

            - task: ComponentGovernanceComponentDetection@0
              inputs:
                # `.packages` directory is used by some tools running during build.
                # By default ComponentDetection scans this directory and sometimes reports
                # vulnerabilities for packages that are not part of the published product.
                # We can ignore this directory because actual vulnerabilities
                # that we are interested in will be found by the tool
                # when scanning .csproj and package.json files.
                ignoreDirectories: '.packages'

    - template: /eng/common/templates-official/post-build/post-build.yml@self
      parameters:
        enableSymbolValidation: true
        enableSigningValidation: false
        artifactsPublishingAdditionalParameters: '/p:CheckEolTargetFramework=false'
        symbolPublishingAdditionalParameters: '/p:CheckEolTargetFramework=false'
        # This is to enable SDL runs part of Post-Build Validation Stage
        SDLValidationParameters:
          enable: true
          params: '-SourceToolsList @("policheck","credscan")
          -TsaInstanceURL $(_TsaInstanceURL)
          -TsaProjectName $(_TsaProjectName)
          -TsaNotificationEmail $(_TsaNotificationEmail)
          -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
          -TsaBugAreaPath $(_TsaBugAreaPath)
          -TsaIterationPath $(_TsaIterationPath)
          -TsaRepositoryName "Dnceng-Shared"
          -TsaCodebaseName "Dnceng-Shared"
          -TsaPublish $True
          -PoliCheckAdditionalRunConfigParams @("UserExclusionPath < $(Build.SourcesDirectory)/eng/PoliCheckExclusions.xml")'